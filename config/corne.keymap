/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        conditional_layers {
                compatible = "zmk,conditional-layers";
                combo_layer {
                        if-layers = <1 2>;
                        then-layer = <3>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I   |  O  |  P  | ESC |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K   |  L  |     | DEL |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |      |     |     | ALT |
//                    | GUI |NLAYR| SPC |   | ENT |SYMLYR| BSPC |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp ESC
   &kp LSHFT &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &trans   &kp DEL
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &trans    &trans  &trans   &kp RALT
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp BSCP
                        >;
                };

                number_layer {
// -----------------------------------------------------------------------------------------
// | F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 | F12 |
// | SHFT|  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
// | CTRL|     |     |     |     |     |   |     |     |     |     |     | ALT |
//                     | GUI |     | SPC |   | ENT |CBLYR| BSCP |
                        bindings = <
   &kp F1       &kp F2     &kp F3     &kp F4    &kp F5    &kp F6       &kp F7   &kp F8    &kp F9  &kp F10  &kp F11   &kp F12
   &kp LSHFT    &kp N1     &kp N2     &kp N3    &kp N4    &kp N5       &kp N6   &kp N7    &kp N8  &kp N9   &kp N0    &kp DEL
   &kp LCTRL    &trans     &trans     &trans    &trans    &trans       &trans   &trans    &trans  &trans   &trans    &kp RALT
                                      &kp LGUI  &mo 2     &kp SPACE    &kp RET  &trans    &kp BSCP
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  `  |     |     |     |     |   |     |     |     |     |     | ESC  |
// | SHFT |  \  |  =  |  -  |  [  |  ]  |   |     |     |     |     |     | DEL  |
// | CTRL |     |     |     |     |     |   |     |     |     |     |     | RALT |
//                    | GUI |CBLYR| SPC |   | ENT |     | BSCP|
                        bindings = <
   &kp TAB     &kp GRAVE   &trans      &trans      &trans       &trans      &trans    &trans    &trans    &trans       &trans      &kp ESC
   &kp LSHFT   &kp BSLH    &kp EQUAL   &kp MINUS   &kp LBKT     &kp RBKT    &trans    &trans    &trans    &trans       &trans      &kp DEL
   &kp LCTRL   &trans      &trans      &trans      &trans       &trans      &trans    &trans    &trans    &trans       &trans      &kp RALT
                           &kp LGUI    &trans      &kp SPACE    &kp RET     &trans    &kp BSCP
                        >;
                };

                combo_layer {
// -----------------------------------------------------------------------------------------
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |      |  UP |     |     |VOL_UP|
// |      |     |     |     |     |     |   |     |  LFT | DWN | RGT |     |C_MUTE|
// |      |     |     |     |     |     |   |     | CPRV |CPAUS|CNEXT|     |VOLDWN|
//                    | GUI |     | SPC |   | ENT |      | BSCP|
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &trans   &trans       &kp UP       &trans       &trans   &kp C_VOL_UP
   &trans     &trans       &trans       &trans       &trans       &trans          &trans   &kp LEFT     &kp DOWN     &kp RIGHT    &trans   &kp C_MUTE
   &trans     &trans       &trans       &trans       &trans       &trans          &trans   &kp C_PREV   &kp C_PAUSE  &kp C_NEXT   &trans   &kp C_VOL_DN
                                        &kp LGUI     &trans       &kp SPACE       &kp RET  &trans    &kp BSCP
                        >;
                };
        };
};
